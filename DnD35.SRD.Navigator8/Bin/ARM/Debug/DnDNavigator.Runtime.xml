<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DnDNavigator.Runtime</name>
    </assembly>
    <members>
        <member name="F:DnDNavigator.Runtime.Constants.Database.DB_CURRENT_VERSION">
             <summary>
             Stores the current version (not schema) of the DB.  Used to track updates made to the actual data.
             12/29/13 - Removed duplicate entries in ITEM table with DELETE FROM item WHERE id NOT IN (SELECT MIN(id) FROM item GROUP BY name)
             11-2-14 - Cleaned up empty entries in item table.  These were largely duplicates of entries in the spell table.
                 --verify with this one
            SELECT name, full_text FROM item WHERE name LIKE '%scroll%'
            --use this one
            UPDATE item SET name = name || ' (Scroll)' WHERE name IN (SELECT i.name FROM item i INNER JOIN spell s ON i.name = s.name)
             </summary>
        </member>
        <member name="T:DnDNavigator.Runtime.Constants.DatabaseQueries">
            <summary>
            I currently have no need for anything other than a single static SELECT query to retrieve information
            from the database.  Therefore, all queries reside here for use.  
            </summary>
        </member>
        <member name="F:DnDNavigator.Runtime.Constants.DatabaseQueries.QUERY_CUSTOM_NAME_MODIFIER">
            <summary>
            Has a '?' where the user argument should be passed in.
            </summary>
        </member>
        <member name="T:DnDNavigator.Runtime.DataAccess.DBHelper">
            <summary>
            Aids basic CRUD for the database
            </summary>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.DBHelper.Open">
            <summary>
            Open a connection to the database.
            </summary>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.DBHelper.Close">
            <summary>
            Close the connection (if there is one) to the database and clear out the SQLite HandleTracker.
            </summary>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.DBHelper.GetEntry``1(System.String)">
            <summary>
            Get a single entry from the database.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryStatement"></param>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.EntityToBusinessConverter`1.PropExistsInType(System.Reflection.PropertyInfo)">
            <summary>
            Checks to see if the passed in property exists on the initial Type.  Returns true if it does.
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.EntryDataService.GetEntry``2(System.String,System.String)">
            <summary>
            Get a single entry from the database as the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="queryStatement"></param>
            <param name="userQueryText"></param>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.EntryDataService.GetSingleValue``2(System.String,System.String[])">
            <summary>
            Get a single value from the database as the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryStatement"></param>
            <param name="userParams"></param>
            <remarks>I just want a string or other primitive back, but NO Sqlite for WP just HAS to only accept a parameterless cons Type</remarks>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.EntryDataService.BuildQuery(System.String,System.String)">
            <summary>
            Tosses the user's value into the query since apparently sqlite on wp8 can't find ?'s 
            in LIKE statements with '%?%' surrounding them...
            </summary>
            <param name="baseQuery"></param>
            <param name="userQueryText"></param>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.EntryDataService.BuildQuery(System.String,System.String[])">
            <summary>
            Takes in an array of params and sequentially (in order of first come first serve) applies them to the baseQuery when '?' is hit.  
            Returns a string with the filled in params from '?'.
            </summary>
            <param name="baseQuery"></param>
            <param name="userParams"></param>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.FavoriteService.IsInFavorites(DnDNavigator.Runtime.Model.Entry.BaseEntry)">
            <summary>
            Checks to see if the passed in Entry already exists in the Favorites.
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.FavoriteService.DeleteFavorites(System.Collections.Generic.List{DnDNavigator.Runtime.Model.Entry.BaseEntry})">
            <summary>
            Removes all of the passed favorites from the stored favorites.
            </summary>
            <param name="favorites"></param>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.FavoriteService.GetFavoritesAsList">
            <summary>
            For internal use only.  Gets the favorites as a non grouped list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.FavoriteService.GetGroupedFavoriteItems">
            <summary>
            Gets the favorites as a grouped list ready to display to the user.  Use this when looking
            for something to display the favorites.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.HistoryService.AddToHistory(DnDNavigator.Runtime.Model.Entry.BaseEntry)">
            <summary>
            Add the passed in item to the history list if it isn't already in there.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.HistoryService.IsInHistory(DnDNavigator.Runtime.Model.Entry.BaseEntry)">
            <summary>
            Checks to see if the passed in Item already exists in the History.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.IsolatedStorage.TryGetValue``1(System.String,``0@)">
            <summary>
            If a value is not found using the passed in key, a new key/value pair is created in settings.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.IsolatedStorage.TryGetFileValue``1(System.String,``0@)">
            <summary>
            If a file is not found, creates a new file with newly initialized value of type T written to it.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.IsolatedStorage.CheckIfDBFileUpdateNeeded">
            <summary>
            Checks to see what the user's stored DB version is and copies over the the latest version (if necessary)
            to their Isolated Storage.  This method DOES NOT run any queries against the Database, but will simply copy the latest
            version of the database over if necessary.
            </summary>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.IsolatedStorage.CopyDatabase">
            <summary>
            Use new Wp8 APIs to copy the file to the local storage on the phone.
            </summary>
        </member>
        <member name="T:DnDNavigator.Runtime.DataAccess.LegacyItemConversionService">
            <summary>
            Provides a single entry point to convert a Legacy Item to a new Entry.
            </summary>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.LegacyItemConversionService.ConvertLegacyItemToEntry(DnDNavigator.Runtime.Model.Item)">
            <summary>
            Returns the legacy item passed as a properly typed new Entry.  The entry point for Legacy Item conversion.
            </summary>
            <param name="legacyItem"></param>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.LegacyItemConversionService.GetEntryFromLegacyItem(DnDNavigator.Runtime.Model.Item)">
            <summary>
            Uses the passed in legacy item's data to determine it's EntryType and query the database for its data.
            </summary>
            <param name="legacyItem"></param>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.DataAccess.LegacyItemConversionService.DetermineLegacyItemType(System.String)">
            <summary>
            Since the only determinate factor of a legacy Item is in its sql, uses that to get at the type as an Entry.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="T:DnDNavigator.Runtime.DataAccess.LicenseService">
            <summary>
            Handles all in-app purchasing license logic.
            
            This class is static as it's job is critical and only needs to ever
            exist once in memory to perform its job.
            </summary>
        </member>
        <member name="P:DnDNavigator.Runtime.DataAccess.LicenseService.RefreshLicenseCheckNeeded">
            <summary>
            Basically a cache of whether or not we should fully reach out to the licensing service from ms
            a check the license on the device.  If true, then yes ping the service.  If false, just pull the 
            current value 'IsLicensed'
            </summary>
        </member>
        <member name="P:DnDNavigator.Runtime.DataAccess.LicenseService.IsDonate">
            <summary>
            MISSION CRITICAL.  IF SET, BYPASSES LICENSE CHECK AND RETURNS APP IS LICENSED FOR PREMIUM.  FOR 
            DONATE VERSION USE ONLY!  SET IN APP.XAML.CS BOOTER METHODS.
            </summary>
        </member>
        <member name="P:DnDNavigator.Runtime.DataAccess.LicenseService.IsLicensed">
            <summary>
            True if the user's device is licensed.  False if it is not.  Getter performs a check each time
            to see if the ms license service should be pinged or if using the currently stored local value is ok.
            </summary>
        </member>
        <member name="T:DnDNavigator.Runtime.Feedback.FeedbackEmail">
            <summary>
            Compose an email for feedback to send to ME.
            </summary>
        </member>
        <member name="M:DnDNavigator.Runtime.Model.DnDEntry.EntryService.GetEntryType(DnDNavigator.Runtime.Model.Entry.BaseEntry)">
            <summary>
            Gets the EntryType.Types enum value of the passed in BaseEntry object.  No exception handling
            done here because if this fails something has gone horribly wrong.
            </summary>
            <param name="entry"></param>
            <returns>EntryType.Types</returns>
        </member>
        <member name="P:DnDNavigator.Runtime.Model.DnDEntry.Power.Description">
            <summary>
            Needs html stripped.
            </summary>
        </member>
        <member name="P:DnDNavigator.Runtime.Model.DnDEntry.Power.Augment">
            <summary>
            Needs html stripped.
            </summary>
        </member>
        <member name="M:DnDNavigator.Runtime.Model.Playlists.Playlist.IsInPlaylist(DnDNavigator.Runtime.Model.Entry.BaseEntry)">
            <summary>
            Checks to see if the passed in entry is already in this playlist.
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.Model.Search.SearchService.PerformSearch(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Entry point for getting back search results.
            </summary>
            <param name="userQuery"></param>
            <param name="categories"></param>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.Proximity.ProximityProcess.MessageReceived(Windows.Networking.Proximity.ProximityDevice,Windows.Networking.Proximity.ProximityMessage)">
            <summary>
            Fired when a published message is received.  Converts the message binary data to a byte[] and then 
            deserializes it to an IEntry which is then stored is isolatedstorage.
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
            <returns>IEntry</returns>
        </member>
        <member name="M:DnDNavigator.Runtime.Proximity.ProximityProcess.SendData">
            <summary>
            Sends the actual data over the connected device.
            </summary>
        </member>
        <member name="M:DnDNavigator.Runtime.Proximity.ProximityProcess.InitializeEntry">
            <summary>
            Gets the stored entry from Isolated Storage if there is one.  If 'Entry' is already set, just returns.
            </summary>
        </member>
        <member name="M:DnDNavigator.Runtime.Sort.AlphaKeyGroup`1.#ctor(System.String)">
            <summary>
            Public constructor.
            </summary>
            <param name="key">The key for this group.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DnDNavigator.Runtime.Sort.AlphaKeyGroup`1.CreateGroups(Microsoft.Phone.Globalization.SortedLocaleGrouping)" -->
        <!-- Badly formed XML comment ignored for member "M:DnDNavigator.Runtime.Sort.AlphaKeyGroup`1.CreateGroups(System.Collections.Generic.IEnumerable{`0},System.Globalization.CultureInfo,System.Func{`0,System.String},System.Boolean)" -->
        <member name="P:DnDNavigator.Runtime.Sort.AlphaKeyGroup`1.Key">
            <summary>
            The Key of this group.
            </summary>
        </member>
        <member name="T:DnDNavigator.Runtime.Sort.AlphaKeyGroup`1.GetKeyDelegate">
            <summary>
            The delegate that is used to get the key information.
            </summary>
            <param name="item">An object of type T</param>
            <returns>The key value to use for this object</returns>
        </member>
        <member name="M:DnDNavigator.Runtime.Model.Menu.MenuOptionsService.RefreshHomeMenu">
            <summary>
            Gets the data from the home menu options json file.  If the file doesn't exist,
            the file is created from a serialized list of MenuOption objects.  The file is then read.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DnDNavigator.Runtime.Model.Menu.MenuOptionsService.CreateHomeMenuOptions(Windows.Storage.StorageFolder)">
            <summary>
            Creates the home menu options file.  This is a json serialized list of MenuOption objects.
            </summary>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="T:DnDNavigator.Runtime.Model.Item">
            <summary>
            The Business class for an entry returned from the database. LEGACY!!
            </summary>
        </member>
        <member name="P:DnDNavigator.Runtime.Model.Item.name">
            <summary>
            The actual name of the entry.
            </summary>
        </member>
        <member name="P:DnDNavigator.Runtime.Model.Item.full_text">
            <summary>
            The full HTML of the entry.
            </summary>
        </member>
        <member name="T:DnDNavigator.Runtime.Resources.AppResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DnDNavigator.Runtime.Resources.AppResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DnDNavigator.Runtime.Resources.AppResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DnDNavigator.Runtime.Resources.AppResources.NFC_BLUETOOTH_MSGBOX_MESSAGE">
            <summary>
              Looks up a localized string similar to Using Tap to Share with Bluetooth enabled on your device will result in the best experience..
            </summary>
        </member>
        <member name="P:DnDNavigator.Runtime.Resources.AppResources.NFC_BLUETOOTH_MSGBOX_OK">
            <summary>
              Looks up a localized string similar to Got it!.
            </summary>
        </member>
        <member name="P:DnDNavigator.Runtime.Resources.AppResources.ResourceFlowDirection">
            <summary>
              Looks up a localized string similar to LeftToRight.
            </summary>
        </member>
        <member name="P:DnDNavigator.Runtime.Resources.AppResources.ResourceLanguage">
            <summary>
              Looks up a localized string similar to en-US.
            </summary>
        </member>
        <member name="T:SQLite.SQLiteConnection">
            <summary>
            Represents an open connection to a SQLite database.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnection and opens a SQLite database specified by databasePath.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The default of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnection.#ctor(System.String,SQLite.SQLiteOpenFlags,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnection and opens a SQLite database specified by databasePath.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The default of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            </param>
        </member>
        <member name="F:SQLite.SQLiteConnection._preserveDuringLinkMagic">
            <summary>
            Used to list some code that we want the MonoTouch linker
            to see, but that we never want to actually execute.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.GetMapping(System.Type,SQLite.CreateFlags)">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <param name="type">
            The type whose mapping to the database is returned.
            </param>         
            <param name="createFlags">
            Optional flags allowing implicit PK and indexes based on naming conventions
            </param>     
            <returns>
            The mapping represents the schema of the columns of the database and contains 
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.GetMapping``1">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <returns>
            The mapping represents the schema of the columns of the database and contains 
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DropTable``1">
            <summary>
            Executes a "drop table" on the database.  This is non-recoverable.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTable``1(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            The number of entries added to the database schema.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTable(System.Type,SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <param name="ty">Type to reflect to a database table.</param>
            <param name="createFlags">Optional flags allowing implicit PK and indexes based on naming conventions.</param>  
            <returns>
            The number of entries added to the database schema.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Creates an index for the specified table and columns.
            </summary>
            <param name="indexName">Name of the index to create</param>
            <param name="tableName">Name of the database table</param>
            <param name="columnNames">An array of column names to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an index for the specified table and column.
            </summary>
            <param name="indexName">Name of the index to create</param>
            <param name="tableName">Name of the database table</param>
            <param name="columnName">Name of the column to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String,System.Boolean)">
            <summary>
            Creates an index for the specified table and column.
            </summary>
            <param name="tableName">Name of the database table</param>
            <param name="columnName">Name of the column to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String[],System.Boolean)">
            <summary>
            Creates an index for the specified table and columns.
            </summary>
            <param name="tableName">Name of the database table</param>
            <param name="columnNames">An array of column names to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SQLite.SQLiteConnection.CreateIndex``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)" -->
        <member name="M:SQLite.SQLiteConnection.NewCommand">
            <summary>
            Creates a new SQLiteCommand. Can be overridden to provide a sub-class.
            </summary>
            <seealso cref="M:SQLite.SQLiteCommand.OnInstanceCreated(System.Object)"/>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateCommand(System.String,System.Object[])">
            <summary>
            Creates a new SQLiteCommand given the command text with arguments. Place a '?'
            in the command text for each of the arguments.
            </summary>
            <param name="cmdText">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the command text.
            </param>
            <returns>
            A <see cref="T:SQLite.SQLiteCommand"/>
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Execute(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            Use this method instead of Query when you don't expect rows back. Such cases include
            INSERTs, UPDATEs, and DELETEs.
            You can set the Trace or TimeExecution properties of the connection
            to profile execution.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The number of rows modified in the database as a result of this execution.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Query``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeferredQuery``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Query(SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="T:SQLite.TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeferredQuery(SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="T:SQLite.TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Table``1">
            <summary>
            Returns a queryable interface to the table represented by the given type.
            </summary>
            <returns>
            A queryable object that is able to translate Where, OrderBy, and Take
            queries into native SQL.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Get``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type. 
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Find``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Find(System.Object,SQLite.TableMapping)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <param name="map">
            The TableMapping used to identify the object type.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type. 
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.BeginTransaction">
            <summary>
            Begins a new transaction. Call <see cref="M:SQLite.SQLiteConnection.Commit"/> to end the transaction.
            </summary>
            <example cref="T:System.InvalidOperationException">Throws if a transaction has already begun.</example>
        </member>
        <member name="M:SQLite.SQLiteConnection.SaveTransactionPoint">
            <summary>
            Creates a savepoint in the database at the current point in the transaction timeline.
            Begins a new transaction if one is not in progress.
            
            Call <see cref="M:SQLite.SQLiteConnection.RollbackTo(System.String)"/> to undo transactions since the returned savepoint.
            Call <see cref="M:SQLite.SQLiteConnection.Release(System.String)"/> to commit transactions after the savepoint returned here.
            Call <see cref="M:SQLite.SQLiteConnection.Commit"/> to end the transaction, committing all changes.
            </summary>
            <returns>A string naming the savepoint.</returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Rollback">
            <summary>
            Rolls back the transaction that was begun by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> or <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.RollbackTo(System.String)">
            <summary>
            Rolls back the savepoint created by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> or SaveTransactionPoint.
            </summary>
            <param name="savepoint">The name of the savepoint to roll back to, as returned by <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.  If savepoint is null or empty, this method is equivalent to a call to <see cref="M:SQLite.SQLiteConnection.Rollback"/></param>
        </member>
        <member name="M:SQLite.SQLiteConnection.RollbackTo(System.String,System.Boolean)">
            <summary>
            Rolls back the transaction that was begun by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/>.
            </summary>
            <param name="noThrow">true to avoid throwing exceptions, false otherwise</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.Release(System.String)">
            <summary>
            Releases a savepoint returned from <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.  Releasing a savepoint 
               makes changes since that savepoint permanent if the savepoint began the transaction,
               or otherwise the changes are permanent pending a call to <see cref="M:SQLite.SQLiteConnection.Commit"/>.
            
            The RELEASE command is like a COMMIT for a SAVEPOINT.
            </summary>
            <param name="savepoint">The name of the savepoint to release.  The string should be the result of a call to <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/></param>
        </member>
        <member name="M:SQLite.SQLiteConnection.Commit">
            <summary>
            Commits the transaction that was begun by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SQLite.SQLiteConnection.RunInTransaction(System.Action)" -->
        <member name="M:SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="!:IEnumerable"/> of the objects to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable,System.String)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="!:IEnumerable"/> of the objects to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable,System.Type)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="!:IEnumerable"/> of the objects to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertOrReplace(System.Object)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object,System.Type)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertOrReplace(System.Object,System.Type)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object,System.String)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object,System.String,System.Type)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Update(System.Object)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Update(System.Object,System.Type)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.UpdateAll(System.Collections.IEnumerable)">
            <summary>
            Updates all specified objects.
            </summary>
            <param name="objects">
            An <see cref="!:IEnumerable"/> of the objects to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Delete(System.Object)">
            <summary>
            Deletes the given object from the database using its primary key.
            </summary>
            <param name="objectToDelete">
            The object to delete. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows deleted.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Delete``1(System.Object)">
            <summary>
            Deletes the object with the specified primary key.
            </summary>
            <param name="primaryKey">
            The primary key of the object to delete.
            </param>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of object.
            </typeparam>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeleteAll``1">
            <summary>
            Deletes all the objects from the specified table.
            WARNING WARNING: Let me repeat. It deletes ALL the objects from the
            specified table. Do you really want to do that?
            </summary>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of objects to delete.
            </typeparam>
        </member>
        <member name="P:SQLite.SQLiteConnection.BusyTimeout">
            <summary>
            Sets a busy handler to sleep the specified amount of time when a table is locked.
            The handler will sleep multiple times until a total time of <see cref="P:SQLite.SQLiteConnection.BusyTimeout"/> has accumulated.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.TableMappings">
            <summary>
            Returns the mappings from types to tables that the connection
            currently understands.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.IsInTransaction">
            <summary>
            Whether <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> has been called and the database is waiting for a <see cref="M:SQLite.SQLiteConnection.Commit"/>.
            </summary>
        </member>
        <member name="T:SQLite.SQLiteConnectionString">
            <summary>
            Represents a parsed connection string.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteCommand.OnInstanceCreated(System.Object)">
             <summary>
             Invoked every time an instance is loaded from the database.
             </summary>
             <param name="obj">
             The newly created object.
             </param>
             <remarks>
             This can be overridden in combination with the <see cref="M:SQLite.SQLiteConnection.NewCommand"/>
             method to hook into the life-cycle of objects.
            
             Type safety is not possible because MonoTouch does not support virtual generic methods.
             </remarks>
        </member>
        <member name="T:SQLite.PreparedSqlLiteInsertCommand">
            <summary>
            Since the insert never changed, we only need to prepare once.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.CompileNullBinaryExpression(System.Linq.Expressions.BinaryExpression,SQLite.TableQuery{`0}.CompileResult)">
            <summary>
            Compiles a BinaryExpression where one of the parameters is null.
            </summary>
            <param name="parameter">The non-null parameter</param>
        </member>
        <member name="M:SQLite.SQLiteConnectionPool.Reset">
            <summary>
            Closes all connections managed by this pool.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnectionPool.ApplicationSuspended">
            <summary>
            Call this method when the application is suspended.
            </summary>
            <remarks>Behaviour here is to close any open connections.</remarks>
        </member>
        <member name="P:SQLite.SQLiteConnectionPool.Shared">
            <summary>
            Gets the singleton instance of the connection tool.
            </summary>
        </member>
    </members>
</doc>
